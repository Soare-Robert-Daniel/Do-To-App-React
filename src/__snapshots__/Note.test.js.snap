// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Note Component cancel delete button 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        ],
        Array [
          Object {
            "payload": Object {
              "id": 0,
            },
            "type": "DELETE",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        },
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "id": 0,
            },
            "type": "DELETE",
          },
        },
      ],
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                readonly=""
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={true}
          style={
            Object {
              "color": "black",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  readonly=""
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={true}
            style={
              Object {
                "color": "black",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "black",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={true}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={true}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="edit"
          onClick={[Function]}
          style={
            Object {
              "color": "magenta",
            }
          }
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="edit"
            onClick={[Function]}
            style={
              Object {
                "color": "magenta",
              }
            }
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="edit"
              onClick={[Function]}
              style={
                Object {
                  "color": "magenta",
                }
              }
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="edit"
                onClick={[Function]}
                style={
                  Object {
                    "color": "magenta",
                  }
                }
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="edit"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  style={
                    Object {
                      "color": "magenta",
                    }
                  }
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="delete"
          onClick={[Function]}
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="delete"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="delete"
              onClick={[Function]}
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="delete"
                onClick={[Function]}
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="delete"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;

exports[`Note Component cancel edit button 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        },
      ],
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                readonly=""
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={true}
          style={
            Object {
              "color": "black",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  readonly=""
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={true}
            style={
              Object {
                "color": "black",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "black",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={true}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={true}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="edit"
          onClick={[Function]}
          style={
            Object {
              "color": "magenta",
            }
          }
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="edit"
            onClick={[Function]}
            style={
              Object {
                "color": "magenta",
              }
            }
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="edit"
              onClick={[Function]}
              style={
                Object {
                  "color": "magenta",
                }
              }
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="edit"
                onClick={[Function]}
                style={
                  Object {
                    "color": "magenta",
                  }
                }
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="edit"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  style={
                    Object {
                      "color": "magenta",
                    }
                  }
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="delete"
          onClick={[Function]}
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="delete"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="delete"
              onClick={[Function]}
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="delete"
                onClick={[Function]}
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="delete"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;

exports[`Note Component checkbox 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        ],
        Array [
          Object {
            "payload": Object {
              "id": 0,
            },
            "type": "DELETE",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        },
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "id": 0,
            },
            "type": "DELETE",
          },
        },
      ],
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                readonly=""
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={true}
          style={
            Object {
              "color": "black",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  readonly=""
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={true}
            style={
              Object {
                "color": "black",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "black",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={true}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={true}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="edit"
          onClick={[Function]}
          style={
            Object {
              "color": "magenta",
            }
          }
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="edit"
            onClick={[Function]}
            style={
              Object {
                "color": "magenta",
              }
            }
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="edit"
              onClick={[Function]}
              style={
                Object {
                  "color": "magenta",
                }
              }
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="edit"
                onClick={[Function]}
                style={
                  Object {
                    "color": "magenta",
                  }
                }
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="edit"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  style={
                    Object {
                      "color": "magenta",
                    }
                  }
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="delete"
          onClick={[Function]}
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="delete"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="delete"
              onClick={[Function]}
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="delete"
                onClick={[Function]}
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="delete"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;

exports[`Note Component confirm delete button 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        ],
        Array [
          Object {
            "payload": Object {
              "id": 0,
            },
            "type": "DELETE",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        },
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "id": 0,
            },
            "type": "DELETE",
          },
        },
      ],
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                readonly=""
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={true}
          style={
            Object {
              "color": "black",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  readonly=""
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={true}
            style={
              Object {
                "color": "black",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "black",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={true}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={true}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="edit"
          onClick={[Function]}
          style={
            Object {
              "color": "magenta",
            }
          }
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="edit"
            onClick={[Function]}
            style={
              Object {
                "color": "magenta",
              }
            }
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="edit"
              onClick={[Function]}
              style={
                Object {
                  "color": "magenta",
                }
              }
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="edit"
                onClick={[Function]}
                style={
                  Object {
                    "color": "magenta",
                  }
                }
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="edit"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  style={
                    Object {
                      "color": "magenta",
                    }
                  }
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="delete"
          onClick={[Function]}
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="delete"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="delete"
              onClick={[Function]}
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="delete"
                onClick={[Function]}
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="delete"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;

exports[`Note Component confirm edit button 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": Object {
            "payload": Object {
              "content": "hey",
              "id": 0,
            },
            "type": "UPDATE",
          },
        },
      ],
    }
  }
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                readonly=""
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={true}
          style={
            Object {
              "color": "black",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  readonly=""
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={true}
            style={
              Object {
                "color": "black",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "black",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={true}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={true}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="edit"
          onClick={[Function]}
          style={
            Object {
              "color": "magenta",
            }
          }
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="edit"
            onClick={[Function]}
            style={
              Object {
                "color": "magenta",
              }
            }
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="edit"
              onClick={[Function]}
              style={
                Object {
                  "color": "magenta",
                }
              }
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="edit"
                onClick={[Function]}
                style={
                  Object {
                    "color": "magenta",
                  }
                }
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="edit"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  style={
                    Object {
                      "color": "magenta",
                    }
                  }
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="delete"
          onClick={[Function]}
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="delete"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="delete"
              onClick={[Function]}
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="delete"
                onClick={[Function]}
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="delete"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;

exports[`Note Component delete button 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={[MockFunction]}
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                readonly=""
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={true}
          style={
            Object {
              "color": "darkgrey",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  readonly=""
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={true}
            style={
              Object {
                "color": "darkgrey",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "darkgrey",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={true}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={true}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(Button))
          color="secondary"
          id="delete-confirm"
          onClick={[Function]}
          size="small"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="secondary"
            id="delete-confirm"
            onClick={[Function]}
            size="small"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-text MuiButton-textSecondary MuiButton-textSizeSmall MuiButton-sizeSmall"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              id="delete-confirm"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-text MuiButton-textSecondary MuiButton-textSizeSmall MuiButton-sizeSmall"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="delete-confirm"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSecondary MuiButton-textSizeSmall MuiButton-sizeSmall"
                  disabled={false}
                  id="delete-confirm"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Confirm Delete
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          id="cancel"
          onClick={[Function]}
          size="small"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            id="cancel"
            onClick={[Function]}
            size="small"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              id="cancel"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="cancel"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
                  disabled={false}
                  id="cancel"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Cancel
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;

exports[`Note Component edit button 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={[MockFunction]}
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={false}
          style={
            Object {
              "color": "magenta",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={false}
            style={
              Object {
                "color": "magenta",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "magenta",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={false}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={false}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(Button))
          color="primary"
          id="edit-confirm"
          onClick={[Function]}
          size="small"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            color="primary"
            id="edit-confirm"
            onClick={[Function]}
            size="small"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              id="edit-confirm"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="edit-confirm"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textPrimary MuiButton-textSizeSmall MuiButton-sizeSmall"
                  disabled={false}
                  id="edit-confirm"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Confirm Edit
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
        <WithStyles(ForwardRef(Button))
          id="cancel"
          onClick={[Function]}
          size="small"
        >
          <ForwardRef(Button)
            classes={
              Object {
                "colorInherit": "MuiButton-colorInherit",
                "contained": "MuiButton-contained",
                "containedPrimary": "MuiButton-containedPrimary",
                "containedSecondary": "MuiButton-containedSecondary",
                "containedSizeLarge": "MuiButton-containedSizeLarge",
                "containedSizeSmall": "MuiButton-containedSizeSmall",
                "disableElevation": "MuiButton-disableElevation",
                "disabled": "Mui-disabled",
                "endIcon": "MuiButton-endIcon",
                "focusVisible": "Mui-focusVisible",
                "fullWidth": "MuiButton-fullWidth",
                "iconSizeLarge": "MuiButton-iconSizeLarge",
                "iconSizeMedium": "MuiButton-iconSizeMedium",
                "iconSizeSmall": "MuiButton-iconSizeSmall",
                "label": "MuiButton-label",
                "outlined": "MuiButton-outlined",
                "outlinedPrimary": "MuiButton-outlinedPrimary",
                "outlinedSecondary": "MuiButton-outlinedSecondary",
                "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                "root": "MuiButton-root",
                "sizeLarge": "MuiButton-sizeLarge",
                "sizeSmall": "MuiButton-sizeSmall",
                "startIcon": "MuiButton-startIcon",
                "text": "MuiButton-text",
                "textPrimary": "MuiButton-textPrimary",
                "textSecondary": "MuiButton-textSecondary",
                "textSizeLarge": "MuiButton-textSizeLarge",
                "textSizeSmall": "MuiButton-textSizeSmall",
              }
            }
            id="cancel"
            onClick={[Function]}
            size="small"
          >
            <WithStyles(ForwardRef(ButtonBase))
              className="MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              id="cancel"
              onClick={[Function]}
              type="button"
            >
              <ForwardRef(ButtonBase)
                className="MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                id="cancel"
                onClick={[Function]}
                type="button"
              >
                <button
                  className="MuiButtonBase-root MuiButton-root MuiButton-text MuiButton-textSizeSmall MuiButton-sizeSmall"
                  disabled={false}
                  id="cancel"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiButton-label"
                  >
                    Cancel
                  </span>
                  <WithStyles(memo)
                    center={false}
                  >
                    <ForwardRef(TouchRipple)
                      center={false}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(Button)>
        </WithStyles(ForwardRef(Button))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;

exports[`Note Component render note 1`] = `
<Note
  data={
    Object {
      "content": "hey",
      "data_created": "",
      "id": 0,
      "isCompleted": false,
    }
  }
  dispatch={[MockFunction]}
>
  <WithStyles(ForwardRef(ListItem))
    divider={true}
  >
    <ForwardRef(ListItem)
      classes={
        Object {
          "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
          "button": "MuiListItem-button",
          "container": "MuiListItem-container",
          "dense": "MuiListItem-dense",
          "disabled": "Mui-disabled",
          "divider": "MuiListItem-divider",
          "focusVisible": "Mui-focusVisible",
          "gutters": "MuiListItem-gutters",
          "root": "MuiListItem-root",
          "secondaryAction": "MuiListItem-secondaryAction",
          "selected": "Mui-selected",
        }
      }
      divider={true}
    >
      <li
        className="MuiListItem-root MuiListItem-gutters MuiListItem-divider"
        disabled={false}
      >
        <WithStyles(ForwardRef(Checkbox))
          checked={false}
          id="complet"
          key=".0"
          onChange={[Function]}
        >
          <ForwardRef(Checkbox)
            checked={false}
            classes={
              Object {
                "checked": "Mui-checked",
                "colorPrimary": "MuiCheckbox-colorPrimary",
                "colorSecondary": "MuiCheckbox-colorSecondary",
                "disabled": "Mui-disabled",
                "indeterminate": "MuiCheckbox-indeterminate",
                "root": "MuiCheckbox-root",
              }
            }
            id="complet"
            onChange={[Function]}
          >
            <WithStyles(ForwardRef(SwitchBase))
              checked={false}
              checkedIcon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              classes={
                Object {
                  "checked": "Mui-checked",
                  "disabled": "Mui-disabled",
                  "root": "MuiCheckbox-root MuiCheckbox-colorSecondary",
                }
              }
              color="secondary"
              icon={
                <UNDEFINED
                  fontSize="default"
                />
              }
              id="complet"
              inputProps={
                Object {
                  "data-indeterminate": false,
                }
              }
              onChange={[Function]}
              type="checkbox"
            >
              <ForwardRef(SwitchBase)
                checked={false}
                checkedIcon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                classes={
                  Object {
                    "checked": "PrivateSwitchBase-checked-2 Mui-checked",
                    "disabled": "PrivateSwitchBase-disabled-3 Mui-disabled",
                    "input": "PrivateSwitchBase-input-4",
                    "root": "PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary",
                  }
                }
                color="secondary"
                icon={
                  <UNDEFINED
                    fontSize="default"
                  />
                }
                id="complet"
                inputProps={
                  Object {
                    "data-indeterminate": false,
                  }
                }
                onChange={[Function]}
                type="checkbox"
              >
                <WithStyles(ForwardRef(IconButton))
                  className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                  color="secondary"
                  component="span"
                  onBlur={[Function]}
                  onFocus={[Function]}
                  tabIndex={null}
                >
                  <ForwardRef(IconButton)
                    className="PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary"
                    classes={
                      Object {
                        "colorInherit": "MuiIconButton-colorInherit",
                        "colorPrimary": "MuiIconButton-colorPrimary",
                        "colorSecondary": "MuiIconButton-colorSecondary",
                        "disabled": "Mui-disabled",
                        "edgeEnd": "MuiIconButton-edgeEnd",
                        "edgeStart": "MuiIconButton-edgeStart",
                        "label": "MuiIconButton-label",
                        "root": "MuiIconButton-root",
                        "sizeSmall": "MuiIconButton-sizeSmall",
                      }
                    }
                    color="secondary"
                    component="span"
                    onBlur={[Function]}
                    onFocus={[Function]}
                    tabIndex={null}
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      centerRipple={true}
                      className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                      component="span"
                      disabled={false}
                      focusRipple={true}
                      onBlur={[Function]}
                      onFocus={[Function]}
                      tabIndex={null}
                    >
                      <ForwardRef(ButtonBase)
                        centerRipple={true}
                        className="MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="span"
                        disabled={false}
                        focusRipple={true}
                        onBlur={[Function]}
                        onFocus={[Function]}
                        tabIndex={null}
                      >
                        <span
                          aria-disabled={false}
                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-1 MuiCheckbox-root MuiCheckbox-colorSecondary MuiIconButton-colorSecondary"
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          tabIndex={null}
                        >
                          <span
                            className="MuiIconButton-label"
                          >
                            <input
                              checked={false}
                              className="PrivateSwitchBase-input-4"
                              data-indeterminate={false}
                              id="complet"
                              onChange={[Function]}
                              type="checkbox"
                            />
                            <ForwardRef(CheckBoxOutlineBlankIcon)
                              fontSize="default"
                            >
                              <WithStyles(ForwardRef(SvgIcon))
                                fontSize="default"
                              >
                                <ForwardRef(SvgIcon)
                                  classes={
                                    Object {
                                      "colorAction": "MuiSvgIcon-colorAction",
                                      "colorDisabled": "MuiSvgIcon-colorDisabled",
                                      "colorError": "MuiSvgIcon-colorError",
                                      "colorPrimary": "MuiSvgIcon-colorPrimary",
                                      "colorSecondary": "MuiSvgIcon-colorSecondary",
                                      "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                      "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                      "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                      "root": "MuiSvgIcon-root",
                                    }
                                  }
                                  fontSize="default"
                                >
                                  <svg
                                    aria-hidden={true}
                                    className="MuiSvgIcon-root"
                                    focusable="false"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                    />
                                  </svg>
                                </ForwardRef(SvgIcon)>
                              </WithStyles(ForwardRef(SvgIcon))>
                            </ForwardRef(CheckBoxOutlineBlankIcon)>
                          </span>
                          <WithStyles(memo)
                            center={true}
                          >
                            <ForwardRef(TouchRipple)
                              center={true}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </span>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(IconButton)>
                </WithStyles(ForwardRef(IconButton))>
              </ForwardRef(SwitchBase)>
            </WithStyles(ForwardRef(SwitchBase))>
          </ForwardRef(Checkbox)>
        </WithStyles(ForwardRef(Checkbox))>
        <WithStyles(ForwardRef(InputBase))
          fullWidth={true}
          id="content-0"
          inputRef={
            Object {
              "current": <textarea
                class="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                readonly=""
                rows="1"
                style="height: 0px; overflow: hidden;"
              >
                hey
              </textarea>,
            }
          }
          key=".1"
          multiline={true}
          onChange={[Function]}
          onFocus={[Function]}
          readOnly={true}
          style={
            Object {
              "color": "black",
            }
          }
          value="hey"
        >
          <ForwardRef(InputBase)
            classes={
              Object {
                "adornedEnd": "MuiInputBase-adornedEnd",
                "adornedStart": "MuiInputBase-adornedStart",
                "colorSecondary": "MuiInputBase-colorSecondary",
                "disabled": "Mui-disabled",
                "error": "Mui-error",
                "focused": "Mui-focused",
                "formControl": "MuiInputBase-formControl",
                "fullWidth": "MuiInputBase-fullWidth",
                "input": "MuiInputBase-input",
                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                "inputMarginDense": "MuiInputBase-inputMarginDense",
                "inputMultiline": "MuiInputBase-inputMultiline",
                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                "marginDense": "MuiInputBase-marginDense",
                "multiline": "MuiInputBase-multiline",
                "root": "MuiInputBase-root",
              }
            }
            fullWidth={true}
            id="content-0"
            inputRef={
              Object {
                "current": <textarea
                  class="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  readonly=""
                  rows="1"
                  style="height: 0px; overflow: hidden;"
                >
                  hey
                </textarea>,
              }
            }
            multiline={true}
            onChange={[Function]}
            onFocus={[Function]}
            readOnly={true}
            style={
              Object {
                "color": "black",
              }
            }
            value="hey"
          >
            <div
              className="MuiInputBase-root MuiInputBase-fullWidth MuiInputBase-multiline"
              onClick={[Function]}
              style={
                Object {
                  "color": "black",
                }
              }
            >
              <ForwardRef(TextareaAutosize)
                className="MuiInputBase-input MuiInputBase-inputMultiline"
                id="content-0"
                onAnimationStart={[Function]}
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                readOnly={true}
                value="hey"
              >
                <textarea
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  id="content-0"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  readOnly={true}
                  rows={1}
                  style={
                    Object {
                      "height": 0,
                      "overflow": "hidden",
                    }
                  }
                  value="hey"
                />
                <textarea
                  aria-hidden={true}
                  className="MuiInputBase-input MuiInputBase-inputMultiline"
                  readOnly={true}
                  style={
                    Object {
                      "height": 0,
                      "left": 0,
                      "overflow": "hidden",
                      "position": "absolute",
                      "top": 0,
                      "transform": "translateZ(0)",
                      "visibility": "hidden",
                    }
                  }
                  tabIndex={-1}
                />
              </ForwardRef(TextareaAutosize)>
            </div>
          </ForwardRef(InputBase)>
        </WithStyles(ForwardRef(InputBase))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="edit"
          onClick={[Function]}
          style={
            Object {
              "color": "magenta",
            }
          }
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="edit"
            onClick={[Function]}
            style={
              Object {
                "color": "magenta",
              }
            }
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="edit"
              onClick={[Function]}
              style={
                Object {
                  "color": "magenta",
                }
              }
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="edit"
                onClick={[Function]}
                style={
                  Object {
                    "color": "magenta",
                  }
                }
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="edit"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  style={
                    Object {
                      "color": "magenta",
                    }
                  }
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
        <WithStyles(ForwardRef(IconButton))
          aria-label="delete"
          edge="end"
          id="delete"
          onClick={[Function]}
        >
          <ForwardRef(IconButton)
            aria-label="delete"
            classes={
              Object {
                "colorInherit": "MuiIconButton-colorInherit",
                "colorPrimary": "MuiIconButton-colorPrimary",
                "colorSecondary": "MuiIconButton-colorSecondary",
                "disabled": "Mui-disabled",
                "edgeEnd": "MuiIconButton-edgeEnd",
                "edgeStart": "MuiIconButton-edgeStart",
                "label": "MuiIconButton-label",
                "root": "MuiIconButton-root",
                "sizeSmall": "MuiIconButton-sizeSmall",
              }
            }
            edge="end"
            id="delete"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(ButtonBase))
              aria-label="delete"
              centerRipple={true}
              className="MuiIconButton-root MuiIconButton-edgeEnd"
              disabled={false}
              focusRipple={true}
              id="delete"
              onClick={[Function]}
            >
              <ForwardRef(ButtonBase)
                aria-label="delete"
                centerRipple={true}
                className="MuiIconButton-root MuiIconButton-edgeEnd"
                classes={
                  Object {
                    "disabled": "Mui-disabled",
                    "focusVisible": "Mui-focusVisible",
                    "root": "MuiButtonBase-root",
                  }
                }
                disabled={false}
                focusRipple={true}
                id="delete"
                onClick={[Function]}
              >
                <button
                  aria-label="delete"
                  className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                  disabled={false}
                  id="delete"
                  onBlur={[Function]}
                  onClick={[Function]}
                  onDragLeave={[Function]}
                  onFocus={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  onMouseDown={[Function]}
                  onMouseLeave={[Function]}
                  onMouseUp={[Function]}
                  onTouchEnd={[Function]}
                  onTouchMove={[Function]}
                  onTouchStart={[Function]}
                  tabIndex={0}
                  type="button"
                >
                  <span
                    className="MuiIconButton-label"
                  >
                    <ForwardRef>
                      <WithStyles(ForwardRef(SvgIcon))>
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef>
                  </span>
                  <WithStyles(memo)
                    center={true}
                  >
                    <ForwardRef(TouchRipple)
                      center={true}
                      classes={
                        Object {
                          "child": "MuiTouchRipple-child",
                          "childLeaving": "MuiTouchRipple-childLeaving",
                          "childPulsate": "MuiTouchRipple-childPulsate",
                          "ripple": "MuiTouchRipple-ripple",
                          "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                          "rippleVisible": "MuiTouchRipple-rippleVisible",
                          "root": "MuiTouchRipple-root",
                        }
                      }
                    >
                      <span
                        className="MuiTouchRipple-root"
                      >
                        <TransitionGroup
                          childFactory={[Function]}
                          component={null}
                          exit={true}
                        />
                      </span>
                    </ForwardRef(TouchRipple)>
                  </WithStyles(memo)>
                </button>
              </ForwardRef(ButtonBase)>
            </WithStyles(ForwardRef(ButtonBase))>
          </ForwardRef(IconButton)>
        </WithStyles(ForwardRef(IconButton))>
      </li>
    </ForwardRef(ListItem)>
  </WithStyles(ForwardRef(ListItem))>
</Note>
`;
